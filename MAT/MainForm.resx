<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAPgAAAH8AAAD/wAAD//AAD/
</value>
  </data>
</root>